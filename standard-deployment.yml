parameters:
- name: useTerraform
  type: boolean
  default: true
- name: usersteps
  type: stepList
  default: []
- name: terraformVersion
  type: string
  default: ''

variables:
- template: helpers/select-environment.yml
  parameters:
    sourceBranchName: $(Build.SourceBranchName)
    buildReason: $(Build.Reason)

stages:
- stage: Validate
  jobs:
  - ${{ if eq(parameters.useTerraform, true) }}:
    - job: CheckTerraform
      displayName: Terraform Plan
      variables:
      - ${{ if eq(parameters.useTerraform, true) }}:
        - template: helpers/terraform-environment.yml
          parameters:
            AWS_ACCOUNT: $(AWS_ACCOUNT)  
            AWS_REGION: $(AWS_REGION)
            ENVIRONMENT_NAME: $(ENVIRONMENT_NAME)
            localPath: $(Build.Repository.LocalPath)
            projectName: $(System.TeamProject)
            repoName: $(Build.Repository.Name)
            terraformVersion: ${{ parameters.terraformVersion }}
      steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        condition: ne('${{ variables.TF_VERSION }}', '')
        inputs:
          terraformVersion: $(TF_VERSION)

      - task: TerraformTaskV1@0
        displayName: Initialise Terraform
        inputs:
          provider: $(TF_PROVIDER)
          command: init
          workingDirectory: $(TF_PATH)
          commandOptions: -backend-config=role_arn=$(TF_ROLE_ARN)
          backendServiceAWS: $(TF_SERVICE_CONNECTOR)
          backendAWSBucketName: $(TF_BACKEND_BUCKET)
          backendAWSKey: $(TF_BACKEND_KEY)

      - task: TerraformTaskV1@0
        displayName: Plan Terraform
        name: TerraformPlan
        inputs:
          provider: $(TF_PROVIDER)
          command: plan
          workingDirectory: $(TF_PATH)
          commandOptions: -out=tfplan -var-file=$(TF_VAR_FILE)
          environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

      - publish: $(TerraformPlan.jsonPlanFilePath)
        artifact: tf-plan-json-$(ENVIRONMENT_NAME)
        displayName: Publish Terraform Plan (JSON)

      - publish: $(TF_PATH)/tfplan
        artifact: tfplan-$(ENVIRONMENT_NAME)
        displayName: Publish Terraform Plan (tfplan)

- stage: Deploy
  jobs:
  - deployment: Deploy
    environment: $(ENVIRONMENT_NAME)
    variables:
    - ${{ if eq(parameters.useTerraform, true) }}:
      - template: helpers/terraform-environment.yml
        parameters:
          AWS_ACCOUNT: $(AWS_ACCOUNT)  
          AWS_REGION: $(AWS_REGION)
          ENVIRONMENT_NAME: $(ENVIRONMENT_NAME)
          localPath: $(Build.Repository.LocalPath)
          projectName: $(System.TeamProject)
          repoName: $(Build.Repository.Name)
          terraformVersion: ${{ parameters.terraformVersion }}
    strategy:
      runOnce:
        ${{ if eq(parameters.useTerraform, true) }}:
          preDeploy:  
            steps:
            - checkout: self

            - download: current
              artifact: tfplan-$(ENVIRONMENT_NAME)
              displayName: Get tfplan

            - task: TerraformInstaller@0
              displayName: Install Terraform
              condition: ne('${{ variables.TF_VERSION }}', '')
              inputs:
                terraformVersion: $(TF_VERSION)

            - task: TerraformTaskV1@0
              displayName: Initialise Terraform
              inputs:
                provider: $(TF_PROVIDER)
                command: init
                workingDirectory: $(TF_PATH)
                commandOptions: -backend-config=role_arn=$(TF_ROLE_ARN)
                backendServiceAWS: $(TF_SERVICE_CONNECTOR)
                backendAWSBucketName: $(TF_BACKEND_BUCKET)
                backendAWSKey: $(TF_BACKEND_KEY)

            - task: TerraformTaskV1@0
              displayName: Apply Terraform
              name: TerraformApply
              inputs:
                provider: $(TF_PROVIDER)
                command: apply
                workingDirectory: $(TF_PATH)
                commandOptions: $(Pipeline.Workspace)/tfplan-$(ENVIRONMENT_NAME)/tfplan
                environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

            - publish: $(TerraformApply.jsonOutputVariablesPath)
              artifact: terraform-output-$(ENVIRONMENT_NAME)
              displayName: Publish Terraform Output

            - script: echo "##vso[task.setvariable variable=fileName;isOutput=true]$(TerraformApply.jsonOutputVariablesPath)"
              name: GetTFOutputFileName

        deploy:  
          steps:
          - checkout: self

          - download: current
            artifact: terraform-output-$(ENVIRONMENT_NAME)
            displayName: Get Terraform Outputs

          - ${{ each step in parameters.usersteps }}:
            - ${{ step }}
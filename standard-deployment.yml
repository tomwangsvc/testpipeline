parameters:
- name: defaultBranchName
  type: string
  default: 'master'
- name: useTerraform
  type: boolean
  default: true
- name: usersteps
  type: stepList
  default: []
- name: terraformVersion
  type: string
  default: ''

variables:
- template: helpers/select-environment.yml
  parameters:
    defaultBranchName: ${{ parameters.defaultBranchName }}

- ${{ if eq(parameters.useTerraform, true) }}:
  - template: helpers/terraform-environment.yml
    parameters:
      AWS_ACCOUNT: $(AWS_ACCOUNT)  
      AWS_REGION: $(AWS_REGION)
      ENVIRONMENT_NAME: $(ENVIRONMENT_NAME)
      repoName: $(Build.Repository.Name)
      sourcesDirectory: $(Build.SourcesDirectory)
      terraformVersion: ${{ parameters.terraformVersion }}

stages:
- stage: Validate
  jobs:
  - ${{ if eq(parameters.useTerraform, true) }}:
    - job: TerraformPlan
      displayName: Terraform Plan
      steps:
      - template: helpers/terraform-init.yml

      - task: TerraformTaskV1@0
        displayName: Plan Terraform
        name: TerraformPlan
        inputs:
          provider: $(TF_PROVIDER)
          command: plan
          workingDirectory: $(TF_PATH)
          commandOptions: -out=$(Build.StagingDirectory)/tfplan -var-file=$(TF_VAR_FILE)
          environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

      - script: mv $(TerraformPlan.jsonPlanFilePath) $(Build.StagingDirectory)/tfplan.json
        name: GetTFPlanJson
        displayName: Get tfplan.json

      - publish: $(Build.StagingDirectory)
        artifact: tfplan-$(ENVIRONMENT_NAME)
        displayName: Publish Terraform Plan

- stage: Deploy
  displayName: Deploy (${{ variables['ENVIRONMENT_NAME'] }})
  jobs:
  - deployment: Deploy
    environment: $(ENVIRONMENT_NAME)
    strategy:
      runOnce:
        ${{ if eq(parameters.useTerraform, true) }}:
          preDeploy:  
            steps:
            - checkout: self

            - download: current
              artifact: tfplan-$(ENVIRONMENT_NAME)
              displayName: Get tfplan

            - template: helpers/terraform-init.yml

            - task: TerraformTaskV1@0
              displayName: Apply Terraform
              name: TerraformApply
              inputs:
                provider: $(TF_PROVIDER)
                command: apply
                workingDirectory: $(TF_PATH)
                commandOptions: $(Pipeline.Workspace)/tfplan-$(ENVIRONMENT_NAME)/tfplan
                environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

            - script: mv $(TerraformApply.jsonOutputVariablesPath) $(Build.StagingDirectory)/tfoutput.json
              name: GetTFOutputFileName
              displayName: Get Terraform Output

            - publish: $(Build.StagingDirectory)
              artifact: tfoutput-$(ENVIRONMENT_NAME)
              displayName: Publish Terraform Output

        deploy:  
          steps:
          - checkout: self

          - download: current
            artifact: tfoutput-$(ENVIRONMENT_NAME)
            displayName: Get Terraform Outputs

          - ${{ each step in parameters.usersteps }}:
            - ${{ step }}
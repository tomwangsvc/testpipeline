parameters:
- name: defaultBranchName
  type: string
  default: 'master'
- name: useTerraform
  type: boolean
  default: true
- name: terraformVersion
  type: string
  default: ''
- name: buildContainerImage
  type: string
  default: ''

variables:
- template: helpers/select-environment.yml
  parameters:
    defaultBranchName: ${{ parameters.defaultBranchName }}

- ${{ if eq(parameters.useTerraform, true) }}:
  - template: helpers/terraform-environment.yml
    parameters:
      AWS_ACCOUNT: $(AWS_ACCOUNT)  
      AWS_REGION: $(AWS_REGION)
      ENVIRONMENT_NAME: $(ENVIRONMENT_NAME)
      repoName: $(Build.Repository.Name)
      sourcesDirectory: $(Build.SourcesDirectory)
      terraformVersion: ${{ parameters.terraformVersion }}

stages:
- stage: Validate
  jobs:
  - job: GetContainerImage
    displayName: Get Container Image
    steps:
    - template: helpers/container-get-image.yml
      parameters:
        buildContainerImage: ${{ parameters.buildContainerImage }}

  - job: ValidateApp
    displayName: Validate App
    condition: or(eq(variables.ENVIRONMENT_NAME, 'DEV'), eq(variables.ENVIRONMENT_NAME, 'QA'))
    dependsOn: GetContainerImage
    variables:
      CONTAINER_IMAGE: $[ dependencies.GetContainerImage.outputs['GetImage.url'] ]
    container: 
      image: $(CONTAINER_IMAGE)
      env:
        CI: true
    steps:
    - task: Cache@2
      displayName: Check Dependency Cache
      inputs:
        key: 'yarn | "$(Agent.OS)" | yarn.lock'
        path: 'node_modules'
        cacheHitVar: 'CACHE_RESTORED'
        restoreKeys: |
          yarn | $(Agent.OS)
          yarn

    - script: yarn --frozen-lockfile
      displayName: Install Dependencies
      condition: ne(variables.CACHE_RESTORED, 'true')

    - script: yarn test
      displayName: Unit Test

  - ${{ if eq(parameters.useTerraform, true) }}:
    - job: TerraformPlan
      displayName: Terraform Plan
      steps:
      - template: helpers/terraform-init.yml

      - task: TerraformTaskV1@0
        displayName: Plan Terraform
        name: TerraformPlan
        inputs:
          provider: $(TF_PROVIDER)
          command: plan
          workingDirectory: $(TF_PATH)
          commandOptions: -out=$(Build.StagingDirectory)/tfplan -var-file=$(TF_VAR_FILE)
          environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

      - script: mv $(TerraformPlan.jsonPlanFilePath) $(Build.StagingDirectory)/tfplan.json
        name: GetTFPlanJson
        displayName: Get tfplan.json

      - publish: $(Build.StagingDirectory)
        artifact: tfplan-$(ENVIRONMENT_NAME)
        displayName: Publish Terraform Plan

- stage: BuildDeploy
  displayName: Build and Deploy
  jobs:
  - deployment: Terraform
    environment: $(ENVIRONMENT_NAME)
    strategy:
      runOnce:
        ${{ if eq(parameters.useTerraform, true) }}:
          deploy:  
            steps:
            - checkout: self

            - download: current
              artifact: tfplan-$(ENVIRONMENT_NAME)
              displayName: Get tfplan

            - template: helpers/terraform-init.yml

            - task: TerraformTaskV1@0
              displayName: Apply Terraform
              name: TerraformApply
              inputs:
                provider: $(TF_PROVIDER)
                command: apply
                workingDirectory: $(TF_PATH)
                commandOptions: $(Pipeline.Workspace)/tfplan-$(ENVIRONMENT_NAME)/tfplan
                environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

            - script: mv $(TerraformApply.jsonOutputVariablesPath) $(Build.StagingDirectory)/tfoutput.json
              name: GetTFOutputFileName
              displayName: Get Terraform Output

            - publish: $(Build.StagingDirectory)
              artifact: tfoutput-$(ENVIRONMENT_NAME)
              displayName: Publish Terraform Output

  - job: Build
    dependsOn: Terraform
    variables:
      CONTAINER_IMAGE: $[ stageDependencies.Validate.GetContainerImage.outputs['GetImage.url'] ]
    container: 
      image: $(CONTAINER_IMAGE)
      env:
        CI: true
    steps:
    - checkout: self

    - download: current
      artifact: tfoutput-$(ENVIRONMENT_NAME)
      displayName: Get Terraform Outputs

    - script: printenv
    
    - script: cat $(Pipeline.Workspace)/tfoutput-$(ENVIRONMENT_NAME)/tfoutput.json

    - task: Cache@2
      displayName: Check Dependency Cache
      inputs:
        key: 'yarn | "$(Agent.OS)" | yarn.lock'
        path: 'node_modules'
        cacheHitVar: 'CACHE_RESTORED'
        restoreKeys: |
          yarn | $(Agent.OS)
          yarn

    - script: yarn --frozen-lockfile
      displayName: Install Dependencies
      condition: ne(variables.CACHE_RESTORED, 'true')

    - script: ./node_modules/.bin/env-cmd -f .env.${ENVIRONMENT_NAME} npm run build
      displayName: Build App

    - publish: $(System.DefaultWorkingDirectory)/build/
      artifact: react-app-$(ENVIRONMENT_NAME)
      displayName: Publish App Artifact

  - deployment: App
    dependsOn: 
    - Build
    - Terraform
    environment: $(ENVIRONMENT_NAME)
    strategy:
      runOnce:
        deploy:  
          steps:
          - checkout: none

          - download: current
            artifact: react-app-$(ENVIRONMENT_NAME)
            displayName: Get App Build

          - download: current
            artifact: tfoutput-$(ENVIRONMENT_NAME)
            displayName: Get Terraform Outputs

          - script: printenv
          
          - script: cat $(Pipeline.Workspace)/tfoutput-$(ENVIRONMENT_NAME)/tfoutput.json

          - task: S3Upload@1
            inputs:
              awsCredentials: 'CICD (Dev) Infra Deploy'
              regionName: 'ap-southeast-2'
              bucketName: 'devops-sample-app-dev'
              globExpressions: 'build'
              filesAcl: 'public-read'
                  
parameters:
- name: defaultBranchName
  type: string
  default: 'master'
# determine what set of templates will be used for the pipeline
- name: deployType 
  type: string
  default: 'null'
  values:
  - 'null'
  - ADO
  - ReactApp
  - LambdaService
# use a Docker container to run Validate and Build stages
# expects a named image, otherwise uses your repo's devcontainer (default)
- name: useContainerImage 
  type: string
  default: true
# execute Terraform from the repo's '/terraform' directory
# pass a valid terraform version number to force use of that version
- name: useTerraform
  type: string
  default: true
# make Terraform outputs available to the BuildSources job
- name: useTFOutputs
  type: boolean
  default: false

variables:
- template: helpers/select-environment.yml
  parameters:
    defaultBranchName: ${{ parameters.defaultBranchName }}
    ${{ if eq(parameters.deployType, 'ADO') }}:
      skipDEV: true
      skipUAT: true

- ${{ if ne(parameters.useTerraform, false) }}:
  - template: Terraform/environment.yml
    parameters:
      AWS_ACCOUNT: $(AWS_ACCOUNT)  
      AWS_REGION: $(AWS_REGION)
      CICD_ROLE_NAME: $(CICD_ROLE_NAME)
      ENVIRONMENT_NAME: $(ENVIRONMENT_NAME)
      repoName: $(Build.Repository.Name)
      sourcesDirectory: $(Build.SourcesDirectory)

stages:
- stage: Validate
  jobs:
  - ${{ if ne(parameters.useTerraform, false) }}:
    - template: Terraform/validate.yml
      parameters:
        useTFOutputs: ${{ parameters.useTFOutputs }}
        ${{ if eq(parameters.deployType, 'ADO') }}:
          env:
            AZDO_PERSONAL_ACCESS_TOKEN: '$(AZDO_PERSONAL_ACCESS_TOKEN)'

  - ${{ if and(ne(parameters.deployType, 'null'), ne(parameters.useContainerImage, false)) }}:
    # Identify the docker image for later stages
    - job: GetContainerImage
      displayName: Container Image
      steps:
      - template: helpers/container-get-image.yml
        parameters:
          useContainerImage: ${{ parameters.useContainerImage }}

  - ${{ if and(ne(parameters.deployType, 'null'), ne(parameters.useContainerImage, false)) }}:  
    - template: helpers/container-job.yml
      parameters: 
        job: ValidateSources
        displayName: Source Code
        dependsOn: GetContainerImage
        condition: or(eq(variables.ENVIRONMENT_NAME, 'DEV'), eq(variables.ENVIRONMENT_NAME, 'QA'))
        steps:
        - template: ${{ parameters.deployType }}/validate.yml

- stage: Deploy
  dependsOn:
    - Validate
  variables:
    HAS_TERRAFORM_APPLY: $[ stageDependencies.Validate.TerraformPlan.outputs['TerraformCondition.isRequired'] ]
  jobs:
  - ${{ if and(ne(parameters.deployType, 'null'), ne(parameters.useContainerImage, false)) }}:
    - template: helpers/container-job.yml
      parameters: 
        job: BuildSources
        displayName: Build ${{ parameters.deployType }}
        ${{ if eq(parameters.useTFOutputs, 'true') }}:
          dependsOn: Terraform
        steps:
        - template: ${{ parameters.deployType }}/build.yml
          parameters:
            useTFOutputs: ${{ parameters.useTFOutputs }} 

  - ${{ if ne(parameters.useTerraform, false) }}:
    - template: Terraform/deploy.yml
      parameters:
        condition: and(succeeded(), ne(variables['HAS_TERRAFORM_APPLY'], 'false'))
        deployType: ${{ parameters.deployType }}
        useTerraform: ${{ parameters.useTerraform }}
        ${{ if in(parameters.deployType, 'LambdaService') }}:
          preDeploySteps: 
          - template: ${{ parameters.deployType }}/deploy.yml

  - ${{ if in(parameters.deployType, 'ReactApp') }}:
    - deployment: DeployArtifacts
      displayName: Deploy ${{ parameters.deployType }}
      dependsOn: 
        - BuildSources
        - Terraform
      environment: $(ENVIRONMENT_NAME)
      strategy:
        runOnce:
          deploy:  
            steps:
            - template: ${{ parameters.deployType }}/deploy.yml                  
# Deploy ReactApp to AWS Elastic Beanstalk
# TODO: Expects ?S3_BUCKET_NAME? to be set in the environment
steps:
- checkout: self

- task: npmAuthenticate@0
  displayName: Authenticate NPM
  condition: ne(variables.CACHE_RESTORED, 'true')
  inputs:
    workingFile: .npmrc

- template: ../Terraform/output-map.yml
  parameters: 
    terraformOutputEnv: 
      S3_BUCKET_NAME: reactapp_bucket

# - download: current
#   artifact: react-app-$(ENVIRONMENT_NAME)
#   displayName: Get App Build

#TODO: Get npm auth creds onto EB
#TODO: get ENV vars onto EB

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: $(Pipeline.Workspace)/s
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(Pipeline.Workspace)/$(S3_BUCKET_NAME.value).zip
    replaceExistingArchive: true



- task: AWSShellScript@1
  displayName: Sync S3 Bucket
  env:
    S3_BUCKET_NAME: $(S3_BUCKET_NAME.value)
  inputs:
    awsCredentials: $(AWS_SERVICE_CONNECTOR)
    regionName: $(AWS_REGION)
    scriptType: inline
    inlineScript: 'aws s3 sync . s3://${S3_BUCKET_NAME} --delete --acl public-read'
    disableAutoCwd: true
    workingDirectory: $(Pipeline.Workspace)
    failOnStandardError: true

- task: BeanstalkCreateApplicationVersion@1
  displayName: Create EB Application Version
  inputs:
    awsCredentials: $(AWS_SERVICE_CONNECTOR)
    regionName: $(AWS_REGION)
    applicationName: 'sc-labs-dev'
    applicationType: 's3'
    deploymentBundleBucket: $(S3_BUCKET_NAME.value)
    deploymentBundleKey: $(S3_BUCKET_NAME.value).zip
    description: 'Labs Website version'

- task: BeanstalkDeployApplication@1
  displayName: Deploy EB Application Version
  inputs:
    awsCredentials: $(AWS_SERVICE_CONNECTOR)
    regionName: $(AWS_REGION)
    applicationName: 'sc-labs-react'
    environmentName: 'SC-labs-react'
    applicationType: 's3'
    deploymentBundleBucket: $(S3_BUCKET_NAME.value)
    deploymentBundleKey: $(S3_BUCKET_NAME.value).zip
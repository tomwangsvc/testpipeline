# map Terraform outputs to variables so they can be consumed by dependent jobs
parameters:
- name: terraformOutputEnv
  type: object
  default: ''
- name: useTerraform
  type: string
  
jobs:
- ${{ if eq(parameters.terraformOutputEnv, '') }}:
  - job: PublishTFOutputs
    displayName: Publish Terraform Outputs
    condition: and(eq(variables.IS_INFRA_CHANGE, 'false'), eq(variables.IS_OUPUT_CHANGE, 'false'))
    steps:
    - download: current
      artifact: tfplan-$(ENVIRONMENT_NAME)
      displayName: Get tfplan
      
    - template: init.yml
      parameters:
        useTerraform: ${{ parameters.useTerraform }}
    
    - script: echo $(terraform output -json) > $(Build.StagingDirectory)/tfoutput.json
      displayName: Get Outputs
      
    - publish: $(Build.StagingDirectory)
      artifact: tfoutput-$(ENVIRONMENT_NAME)
      displayName: Publish Outputs

- ${{ if ne(parameters.terraformOutputEnv, '') }}:
  - job: GetTFOutput
    displayName: Get Terraform Outputs
    dependsOn: 
    - Terraform
    - PublishTFOutputs
    condition: or(succeeded('Terraform'), succeeded('PublishTFOutputs'))
    steps:
    - download: current
      artifact: tfoutput-$(ENVIRONMENT_NAME)
      displayName: Download Outputs

    - ${{ each entry in parameters.terraformOutputEnv }}:
      - script: |
          output=$(jq -er '.${{ entry.Value }}.value')
          echo $output
          echo "##vso[task.setvariable variable=value;isOutput=true]${output}"
        displayName: Map ${{ entry.Key }}
        name: ${{ entry.Key }}
        workingDirectory: $(Pipeline.Workspace)/tfoutput-$(ENVIRONMENT_NAME)
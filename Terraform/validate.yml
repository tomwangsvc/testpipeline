parameters:
- name: env
  type: object
  default: ''
- name: useTFOutputs
  type: boolean
  
jobs:
- job: Terraform
  steps:
  - template: init.yml
    parameters:
      useTerraform: true

  - task: TerraformTaskV1@0
    displayName: Plan
    name: TerraformPlan
    ${{ if ne(parameters.env, '') }}:
      env: ${{ parameters.env }}
    inputs:
      provider: $(TF_PROVIDER)
      command: plan
      workingDirectory: $(TF_PATH)
      commandOptions: -out=$(Build.StagingDirectory)/tfplan -var-file=$(TF_VAR_FILE)
      environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

  - ${{ if eq(parameters.useTFOutputs, 'false') }}:
  # Allow Terraform Apply to be skipped if there are no changes
    - script: |
        isTerraformRequired=$(jq -er '.resource_changes | map(.change.actions) | flatten | map(select(. != "no-op")) | length | . > 0' $tfjson)
        echo "##vso[task.setvariable variable=isRequired;isOutput=true]${isTerraformRequired}"
      name: TerraformCondition
      displayName: Set Terraform Condition
      env:
        tfjson: $(TerraformPlan.jsonPlanFilePath)

  - script: mv $(TerraformPlan.jsonPlanFilePath) $(Build.StagingDirectory)/tfplan.json
    name: StageTFPlanJson
    displayName: Get tfplan.json

  - publish: $(Build.StagingDirectory)
    artifact: tfplan-$(ENVIRONMENT_NAME)
    displayName: Publish Plan
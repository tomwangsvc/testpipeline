parameters:
- name: deployType 
  type: string
  default: 'null'
- name: useTerraform
  type: string
  default: true
  
jobs:
- job: TerraformPlan
  displayName: Terraform Plan
  steps:
  - template: init.yml
    parameters:
      useTerraform: ${{ parameters.useTerraform }}

  - task: TerraformTaskV1@0
    displayName: Plan Terraform
    name: TerraformPlan
    ${{ if eq(parameters.deployType, 'ADO') }}:
      env:
        AZDO_PERSONAL_ACCESS_TOKEN: '$(AZDO_PERSONAL_ACCESS_TOKEN)'
    inputs:
      provider: $(TF_PROVIDER)
      command: plan
      workingDirectory: $(TF_PATH)
      commandOptions: -out=$(Build.StagingDirectory)/tfplan -var-file=$(TF_VAR_FILE)
      environmentServiceNameAWS: $(TF_SERVICE_CONNECTOR)

  - script: |
      isTerraformRequired=$(jq -er '.resource_changes | map(.change.actions) | flatten | map(select(. != "no-op")) | length | . > 0' $tfjson)
      echo "##vso[task.setvariable variable=isRequired;isOutput=true]${isTerraformRequired}"
    name: TerraformCondition
    displayName: Set Terraform Condition
    env:
      tfjson: $(TerraformPlan.jsonPlanFilePath)

  - script: mv $(TerraformPlan.jsonPlanFilePath) $(Build.StagingDirectory)/tfplan.json
    name: StageTFPlanJson
    displayName: Get tfplan.json

  - publish: $(Build.StagingDirectory)
    artifact: tfplan-$(ENVIRONMENT_NAME)
    displayName: Publish Terraform Plan
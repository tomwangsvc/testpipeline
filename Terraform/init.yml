parameters:
- name: useTerraform
  type: string

steps:
- ${{ if ne(parameters.useTerraform, false) }}:
  # get the version from the useTerraform param if set
  - ${{ if ne(parameters.useTerraform, true) }}:
    - script: echo "##vso[task.setvariable variable=tfVersion;isOutput=true]${TF_VERSION}"
      displayName: Get Terraform Version
      name: GetImage
      env: 
        TF_VERSION: ${{ parameters.useTerraform }}

  # otherwise match the version from tfplan (if available)
  - ${{ if eq(parameters.useTerraform, true) }}:
    - script: echo "##vso[task.setvariable variable=tfVersion;isOutput=true]$(jq -er '.terraform_version' tf-plan.json)"
      displayName: Get Terraform Version
      name: GetTFVersion
      condition: eq(variables['System.StageName'], 'Deploy')
      workingDirectory: $(Pipeline.Workspace)/tfplan-$(ENVIRONMENT_NAME)

  # fallback to the pre-installed version of a different version not found above
  - task: TerraformInstaller@0
    displayName: Install Terraform
    condition: ne(variables.tfVersion, '')
    inputs:
      terraformVersion: $(tfVersion)

- task: TerraformTaskV1@0
  displayName: Initialise Terraform
  inputs:
    provider: $(TF_PROVIDER)
    command: init
    workingDirectory: $(TF_PATH)
    commandOptions: -backend-config=role_arn=$(TF_VAR_AWS_ROLE_ARN)
    backendServiceAWS: $(TF_SERVICE_CONNECTOR)
    backendAWSBucketName: $(TF_BACKEND_BUCKET)
    backendAWSKey: $(TF_BACKEND_KEY)
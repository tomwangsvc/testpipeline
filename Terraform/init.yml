parameters:
- name: useTerraform
  type: string

steps:
- ${{ if ne(parameters.useTerraform, false) }}:
  # get the version from the useTerraform param if set
  - ${{ if ne(parameters.useTerraform, true) }}:
    - script: echo "##vso[task.setvariable variable=version;isOutput=true]${TF_VERSION}"
      displayName: Get Version
      name: GetTFVersion
      env: 
        TF_VERSION: ${{ parameters.useTerraform }}

  # otherwise match the version from tfplan (if available)
  - ${{ if eq(parameters.useTerraform, true) }}:
    - script: |
        targetVersion=$(jq -er '.terraform_version' tfplan.json)
        echo "target version: $targetVersion"
        currentVersion=$(terraform version -json | jq -er '.terraform_version')
        echo "current version: $currentVersion"
        if [ "$targetVersion" != "$currentVersion" ]; then
          echo "setting desired Terraform version to $targetVersion"
          echo "##vso[task.setvariable variable=version;isOutput=true]${targetVersion}"
        fi
      displayName: Get Version
      name: GetTFVersion
      condition: eq(variables.System.StageName, 'Deploy')
      workingDirectory: $(Pipeline.Workspace)/tfplan-$(ENVIRONMENT_NAME)

  # fallback to the pre-installed version if a different version not found above
  - task: TerraformInstaller@0
    displayName: Install 
    condition: ne(variables.GetTFVersion.version, '')
    inputs:
      terraformVersion: $(GetTFVersion.version)

- task: TerraformTaskV1@0
  displayName: Init
  inputs:
    provider: $(TF_PROVIDER)
    command: init
    workingDirectory: $(TF_PATH)
    commandOptions: -backend-config=role_arn=$(TF_VAR_AWS_ROLE_ARN)
    backendServiceAWS: $(TF_SERVICE_CONNECTOR)
    backendAWSBucketName: $(TF_BACKEND_BUCKET)
    backendAWSKey: $(TF_BACKEND_KEY)
parameters:
- name: directory
  type: string
- name: buildImage
  type: string
  default: ''

steps:  
- checkout: self
  submodules: true

- script: |
    repoName=$(basename $sourcePath)
    echo "##vso[task.setvariable variable=repoName;isOutput=true]${repoName}"

    echo "Checking Dockerfile at: ${dockerfilePath}"
    if test -f "$dockerfilePath"; then
      echo "##vso[task.setvariable variable=dockerfilePath;isOutput=true]${dockerfilePath}"

      runtime=$(grep -Po 'FROM \K[^:]*' $dockerfilePath | xargs -L 1 basename)
      echo "Setting Runtime: ${runtime}"
      echo "##vso[task.setvariable variable=runtime;isOutput=true]${runtime}"

      case $runtime in
        nodejs)
          npmrcPath=${sourcePath}/.npmrc
          if test -f "$npmrcPath"; then
            echo "##vso[task.setvariable variable=npmrcPath;isOutput=true]${npmrcPath}"
            buildArguments="--secret id=npmrc-package,src=${npmrcPath}"
          fi
          ;;
      esac

      echo "SET ARGS: ${buildArguments}"
      echo "##vso[task.setvariable variable=buildArguments;isOutput=true]${buildArguments}"
    else
      echo "##vso[task.logissue type=error]Error: no Dockerfile found at ${dockerfilePath}"
      exit 1
    fi
  displayName: Configure Build
  name: ConfigureBuild
  env:
    dockerfilePath: ${{ coalesce(parameters.buildImage, format('{0}/{1}', parameters.directory, 'Dockerfile')) }}
    sourcePath: ${{ parameters.directory }}

- task: npmAuthenticate@0
  displayName: Authenticate NPM
  condition: ne(ConfigureBuild.npmrcPath, '')
  inputs:
    workingFile: '${{ parameters.directory }}/.npmrc'

- task: Docker@2
  displayName: Docker Build
  inputs:
    command: build
    buildContext: ${{ parameters.directory }}
    Dockerfile: $(ConfigureBuild.dockerfilePath)
    repository: $(ConfigureBuild.repoName)
    tags: latest
    arguments: $(ConfigureBuild.buildArguments)
  env:
    DOCKER_BUILDKIT: 1